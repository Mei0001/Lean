-- 演習問題1: 含意と全称量化（C03_Logic 3.1対応）

-- C03_Logicでは含意（→）と全称量化（∀）を学びます
-- まず、型確認の練習をしましょう

-- TODO: 以下の命題の型を確認してください
-- #check ∀ x : ℝ, 0 ≤ x → |x| = x
-- これは「すべての実数xについて、0 ≤ xならば|x| = xである」という命題です

-- 簡単な含意の型を確認
-- TODO: 以下の型を確認してください
-- #check (2 + 2 = 4 → 3 + 3 = 6)
-- #check (∀ x : Nat, x = x)

-- 実数についての基本的な含意を証明しましょう
-- TODO: 以下の定理を証明してください
-- ヒント: introタクティクを使って仮定を導入します
-- theorem pos_abs (x : ℝ) : 0 ≤ x → |x| = x := ???

-- より複雑な全称量化を含む定理を証明しましょう
-- TODO: 以下の定理を証明してください
-- ヒント: 複数の仮定がある場合は、introを複数回使うか、一度に複数の変数を導入できます
-- theorem abs_nonneg_sq (x : ℝ) : |x| ≥ 0 := ???

-- 含意の連鎖を証明しましょう
-- TODO: 以下の定理を証明してください
-- これは C03_Logic 3.1節の例に基づいています
-- theorem abs_lt_epsilon (x y ε : ℝ) : 0 < ε → ε ≤ 1 → |x| < ε → |y| < ε → |x * y| < ε := ???

-- 関数の上界（upper bound）の定義を使ってみましょう
-- TODO: まず、以下の定義を理解してください
-- def FnUb (f : ℝ → ℝ) (a : ℝ) : Prop := ∀ x, f x ≤ a

-- TODO: 以下の型を確認してください
-- #check FnUb (fun x : ℝ => x) (1 : ℝ)
-- これは「関数 f(x) = x が 1 を上界として持つ」という命題です

-- TODO: 以下の定理を証明してください
-- ヒント: FnUbの定義を展開する必要があるかもしれません
-- variable (f g : ℝ → ℝ) (a b : ℝ)
-- theorem sum_ub (hfa : FnUb f a) (hgb : FnUb g b) : FnUb (fun x => f x + g x) (a + b) := ???

